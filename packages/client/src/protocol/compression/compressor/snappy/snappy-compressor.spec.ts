import { SnappyCompressor } from './snappy-compressor';

describe('SnappyCompressor', () => {
  const decompressionCases = [
    {
      //compressed using org.xerial.snappy.SnappyOutputStream
      compressed: [
        0x82, 0x53, 0x4e, 0x41, 0x50, 0x50, 0x59, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x13, 0x11, 0x40, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
        0x0e, 0x0f, 0x10
      ],
      expected: [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10]
    },
    {
      //compressed using org.xerial.snappy.SnappyOutputStream
      compressed: [
        0x82, 0x53, 0x4e, 0x41, 0x50, 0x50, 0x59, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x06, 0x11, 0x00, 0x00, 0x3e, 0x01, 0x00
      ],
      expected: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    },
    {
      //compressed using org.xerial.snappy.SnappyOutputStream
      compressed: [0x82, 0x53, 0x4e, 0x41, 0x50, 0x50, 0x59, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01],
      expected: []
    },
    {
      //compressed using org.xerial.snappy.Snappy
      compressed: [
        0x11, 0x40, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10
      ],
      expected: [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10]
    },
    {
      //compressed using org.xerial.snappy.Snappy
      compressed: [0x11, 0x00, 0x00, 0x3e, 0x01, 0x00],
      expected: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    },
    {
      //compressed using org.xerial.snappy.Snappy
      compressed: [0x00],
      expected: []
    }
  ];

  it.each(decompressionCases)('should correctly decompress data', async ({ compressed, expected }) => {
    const compressedData = Buffer.from(compressed);
    const expectedOutput = Buffer.from(expected);

    const decompressed = await new SnappyCompressor().decompress(compressedData);

    expect(decompressed).toEqual(expectedOutput);
  });

  const compressionCases = [
    {
      toCompress: [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10
      ],
      expected: [
        0x11, 0x40, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10
      ]
    },
    {
      toCompress: [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ],
      expected: [0x11, 0x00, 0x00, 0x3e, 0x01, 0x00]
    },
    {
      toCompress: [],
      expected: [0x00]
    }
  ];
  it.each(compressionCases)('should compress data to plain snappy format', async ({ toCompress, expected }) => {
    const inputToCompress = Buffer.from(toCompress);
    const expectedOutput = Buffer.from(expected);

    const compressed = await new SnappyCompressor().compress(inputToCompress);

    expect(compressed).toEqual(expectedOutput);
  });
});
